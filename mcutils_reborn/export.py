import os
import typing

import beet

from . import Namespace, MCFunction

Path = typing.Container[str]


def path_to_str(path: Path) -> str:
    first, *rest = path

    return f"{first}:{'/'.join(rest)}"


class Datapack(Namespace):
    def __init__(self, name: str,
                 path: str = ".",
                 description: str = "A Datapack generated by the mcutils_reborn module.",
                 pack_format: int = -2):
        super().__init__(name)

        self.path_ = path
        self.description = description
        self.pack_format = pack_format

    def to_beet_pack(self) -> beet.DataPack:
        all_mcfuncs = self.get_all_mcfunctions()

        def mcfunc_to_path(mcfunc: MCFunction) -> str:
            return path_to_str(mcfunc.path())

        out = beet.DataPack(
            name=self.name,
            path=os.path.join(self.path_, self.name),
            zipped=False,
            description=self.description,
            pack_format=self.pack_format,
        )

        for path, mcfunc in all_mcfuncs.items():
            print(f"-> Transpiling {path_to_str(path)}")
            content = mcfunc.content(mcfunc_to_path)

            out[path_to_str(path)] = beet.Function(content)

        return out
